/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  Option,
} from './components/featured-dropdown/interfaces';


export namespace Components {

  interface FeaturedButton {
    /**
    * Text visible on the button
    */
    'label': string;
  }
  interface FeaturedButtonAttributes extends StencilHTMLAttributes {
    /**
    * Text visible on the button
    */
    'label'?: string;
    /**
    * Event emitted on every click
    */
    'onFeaturedButtonClicked'?: (event: CustomEvent) => void;
  }

  interface FeaturedDropdown {
    /**
    * Option that is shown as selected one.
    */
    'chosenOption': Option;
    'isExpanded': boolean;
    /**
    * Callback that will be called on every chosen option change
    */
    'onChangeHandler': Function;
    /**
    * List of selectable options that dropdown contains.
    */
    'options': Option[];
  }
  interface FeaturedDropdownAttributes extends StencilHTMLAttributes {
    /**
    * Option that is shown as selected one.
    */
    'chosenOption'?: Option;
    'isExpanded'?: boolean;
    /**
    * Callback that will be called on every chosen option change
    */
    'onChangeHandler'?: Function;
    /**
    * Event emitted on every option change
    */
    'onDropdownValueChanged'?: (event: CustomEvent) => void;
    /**
    * List of selectable options that dropdown contains.
    */
    'options'?: Option[];
  }

  interface FeaturedLog {
    /**
    * Text visible on the button
    */
    'label': string;
  }
  interface FeaturedLogAttributes extends StencilHTMLAttributes {
    /**
    * Text visible on the button
    */
    'label'?: string;
    /**
    * Event emitted on every click
    */
    'onFeaturedLogClicked'?: (event: CustomEvent) => void;
  }
}

declare global {
  interface StencilElementInterfaces {
    'FeaturedButton': Components.FeaturedButton;
    'FeaturedDropdown': Components.FeaturedDropdown;
    'FeaturedLog': Components.FeaturedLog;
  }

  interface StencilIntrinsicElements {
    'featured-button': Components.FeaturedButtonAttributes;
    'featured-dropdown': Components.FeaturedDropdownAttributes;
    'featured-log': Components.FeaturedLogAttributes;
  }


  interface HTMLFeaturedButtonElement extends Components.FeaturedButton, HTMLStencilElement {}
  var HTMLFeaturedButtonElement: {
    prototype: HTMLFeaturedButtonElement;
    new (): HTMLFeaturedButtonElement;
  };

  interface HTMLFeaturedDropdownElement extends Components.FeaturedDropdown, HTMLStencilElement {}
  var HTMLFeaturedDropdownElement: {
    prototype: HTMLFeaturedDropdownElement;
    new (): HTMLFeaturedDropdownElement;
  };

  interface HTMLFeaturedLogElement extends Components.FeaturedLog, HTMLStencilElement {}
  var HTMLFeaturedLogElement: {
    prototype: HTMLFeaturedLogElement;
    new (): HTMLFeaturedLogElement;
  };

  interface HTMLElementTagNameMap {
    'featured-button': HTMLFeaturedButtonElement
    'featured-dropdown': HTMLFeaturedDropdownElement
    'featured-log': HTMLFeaturedLogElement
  }

  interface ElementTagNameMap {
    'featured-button': HTMLFeaturedButtonElement;
    'featured-dropdown': HTMLFeaturedDropdownElement;
    'featured-log': HTMLFeaturedLogElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
